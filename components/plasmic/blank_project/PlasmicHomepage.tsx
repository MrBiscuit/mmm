// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gMM6j64kFpVw2LjyZ579pf
// Component: qnMVd5StA27B
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { NumberInput } from "@chakra-ui/react"; // plasmic-import: 77cphPrM_BX/codeComponent
import { NumberInputField } from "@chakra-ui/react"; // plasmic-import: PCIchL0CUzi/codeComponent
import { NumberInputStepper } from "@chakra-ui/react"; // plasmic-import: 0CeztaEFxG5/codeComponent
import { NumberIncrementStepper } from "@chakra-ui/react"; // plasmic-import: wgBxq05OMO5/codeComponent
import { NumberDecrementStepper } from "@chakra-ui/react"; // plasmic-import: RDV7ulARdg0/codeComponent
import { Breadcrumb } from "@chakra-ui/react"; // plasmic-import: zN_-EOpHFYh/codeComponent
import { BreadcrumbItem } from "@chakra-ui/react"; // plasmic-import: j1Uvqtt-Lsa/codeComponent
import { BreadcrumbLink } from "@chakra-ui/react"; // plasmic-import: EUEqYxbOL0O/codeComponent
import { AspectRatio } from "@chakra-ui/react"; // plasmic-import: txAaQW6t6y/codeComponent
import { Image } from "@chakra-ui/react"; // plasmic-import: HVlClKYnOJ/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: gMM6j64kFpVw2LjyZ579pf/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: qnMVd5StA27B/css

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  section?: p.Flex<"section">;
  numberInput?: p.Flex<typeof NumberInput>;
  breadcrumb?: p.Flex<typeof Breadcrumb>;
  aspectRatio?: p.Flex<typeof AspectRatio>;
};

export interface DefaultHomepageProps {}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <p.Stack
            as={"section"}
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            hasGap={true}
            className={classNames(projectcss.all, sty.section)}
          >
            <NumberInput
              data-plasmic-name={"numberInput"}
              data-plasmic-override={overrides.numberInput}
              allowMouseWheel={false}
              className={classNames("__wab_instance", sty.numberInput)}
              errorBorderColor={"red.500" as const}
              focusBorderColor={"blue.500" as const}
              format={(() => {
                try {
                  return e => "$" + e;
                } catch (e) {
                  if (e instanceof TypeError) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              isDisabled={false}
              precision={2 as const}
              size={"md" as const}
              step={4 as const}
              variant={"outline" as const}
            >
              <NumberInputField
                className={classNames(
                  "__wab_instance",
                  sty.numberInputField__eQpYv
                )}
              />

              <NumberInputStepper
                className={classNames(
                  "__wab_instance",
                  sty.numberInputStepper___7B5VF
                )}
              >
                <NumberIncrementStepper
                  className={classNames(
                    "__wab_instance",
                    sty.numberIncrementStepper__e8Xg0
                  )}
                />

                <NumberDecrementStepper
                  className={classNames(
                    "__wab_instance",
                    sty.numberDecrementStepper__iB3Rk
                  )}
                />
              </NumberInputStepper>
            </NumberInput>

            <Breadcrumb
              data-plasmic-name={"breadcrumb"}
              data-plasmic-override={overrides.breadcrumb}
              className={classNames("__wab_instance", sty.breadcrumb)}
              separator={"/" as const}
              spacing={"8px" as const}
            >
              <BreadcrumbItem
                className={classNames(
                  "__wab_instance",
                  sty.breadcrumbItem___5Vks
                )}
                seperator={"/" as const}
                spacing={"8px" as const}
              >
                <BreadcrumbLink
                  className={classNames(
                    "__wab_instance",
                    sty.breadcrumbLink___5Y9O
                  )}
                  href={"#" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zVef7
                    )}
                  >
                    {"Home"}
                  </div>
                </BreadcrumbLink>
              </BreadcrumbItem>

              <BreadcrumbItem
                className={classNames(
                  "__wab_instance",
                  sty.breadcrumbItem__c54Z
                )}
                seperator={"/" as const}
                spacing={"8px" as const}
              >
                <BreadcrumbLink
                  className={classNames(
                    "__wab_instance",
                    sty.breadcrumbLink__whtz5
                  )}
                  href={"#" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__p5Tij
                    )}
                  >
                    {"Docs"}
                  </div>
                </BreadcrumbLink>
              </BreadcrumbItem>

              <BreadcrumbItem
                className={classNames(
                  "__wab_instance",
                  sty.breadcrumbItem__sxBl
                )}
                isCurrentPage={true}
                isLastChild={true}
                seperator={"/" as const}
                spacing={"8px" as const}
              >
                <BreadcrumbLink
                  className={classNames(
                    "__wab_instance",
                    sty.breadcrumbLink__skvIr
                  )}
                  href={"#" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__w82F4
                    )}
                  >
                    {"Breadcrumb"}
                  </div>
                </BreadcrumbLink>
              </BreadcrumbItem>
            </Breadcrumb>

            <AspectRatio
              data-plasmic-name={"aspectRatio"}
              data-plasmic-override={overrides.aspectRatio}
              className={classNames("__wab_instance", sty.aspectRatio)}
              ratio={(() => {
                try {
                  return 16 / 10;
                } catch (e) {
                  if (e instanceof TypeError) {
                    return 1.666;
                  }
                  throw e;
                }
              })()}
            >
              <Image
                className={classNames("__wab_instance", sty.image__g1Niu)}
                fallbackSrc={"https://via.placeholder.com/150" as const}
                src={"https://bit.ly/naruto-sage" as const}
              />
            </AspectRatio>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "section", "numberInput", "breadcrumb", "aspectRatio"],
  section: ["section", "numberInput", "breadcrumb", "aspectRatio"],
  numberInput: ["numberInput"],
  breadcrumb: ["breadcrumb"],
  aspectRatio: ["aspectRatio"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  numberInput: typeof NumberInput;
  breadcrumb: typeof Breadcrumb;
  aspectRatio: typeof AspectRatio;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    numberInput: makeNodeComponent("numberInput"),
    breadcrumb: makeNodeComponent("breadcrumb"),
    aspectRatio: makeNodeComponent("aspectRatio"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
