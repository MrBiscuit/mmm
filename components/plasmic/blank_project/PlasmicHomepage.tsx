// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mn1ZNGsn3XwqRSXADLXKwX
// Component: lwZBb7B2-AWx
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { ButtonGroup } from "@chakra-ui/react"; // plasmic-import: z05_GGnPt1/codeComponent
import { Button } from "@chakra-ui/react"; // plasmic-import: lBI7CYLJKC/codeComponent
import { NumberInput } from "@chakra-ui/react"; // plasmic-import: M5UEPTINXEU/codeComponent
import { NumberInputField } from "@chakra-ui/react"; // plasmic-import: tgX4qcL5qKk/codeComponent
import { NumberInputStepper } from "@chakra-ui/react"; // plasmic-import: 6NyNAwxhSqI/codeComponent
import { NumberIncrementStepper } from "@chakra-ui/react"; // plasmic-import: kKMO80aFVAu/codeComponent
import { NumberDecrementStepper } from "@chakra-ui/react"; // plasmic-import: JdqSKBIDFP1/codeComponent
import { RadioGroup } from "@chakra-ui/react"; // plasmic-import: vVYokNpJReM/codeComponent
import { Radio } from "@chakra-ui/react"; // plasmic-import: lQzFbNgiCYI/codeComponent
import { TableContainer } from "@chakra-ui/react"; // plasmic-import: vxqFFmbt7P/codeComponent
import { Table } from "@chakra-ui/react"; // plasmic-import: p-uH97tBjT/codeComponent
import { TableCaption } from "@chakra-ui/react"; // plasmic-import: jruH1ReJS_/codeComponent
import { Thead } from "@chakra-ui/react"; // plasmic-import: EknQA5DBzi/codeComponent
import { Tr } from "@chakra-ui/react"; // plasmic-import: yVuCojkn7I/codeComponent
import { Th } from "@chakra-ui/react"; // plasmic-import: yv2nJfPfy_/codeComponent
import { Tbody } from "@chakra-ui/react"; // plasmic-import: pmVMk5B8To/codeComponent
import { Td } from "@chakra-ui/react"; // plasmic-import: D42FISmxted/codeComponent
import { CheckboxGroup } from "@chakra-ui/react"; // plasmic-import: -OCQWvB3hmc/codeComponent
import { Checkbox } from "@chakra-ui/react"; // plasmic-import: 498QTUgUI2b/codeComponent
import { Breadcrumb } from "@chakra-ui/react"; // plasmic-import: C0oswHBaDm/codeComponent
import { BreadcrumbItem } from "@chakra-ui/react"; // plasmic-import: e1H2jswnag/codeComponent
import { BreadcrumbLink } from "@chakra-ui/react"; // plasmic-import: 2_XxWYnJ9H/codeComponent
import { AspectRatio } from "@chakra-ui/react"; // plasmic-import: NQ4BdCXQvL/codeComponent
import { Image } from "@chakra-ui/react"; // plasmic-import: LRFPPuGisY/codeComponent
import { Stat } from "@chakra-ui/react"; // plasmic-import: DGteNCf1dk8/codeComponent
import { StatLabel } from "@chakra-ui/react"; // plasmic-import: rwZ_P-lUbf/codeComponent
import { StatNumber } from "@chakra-ui/react"; // plasmic-import: GRJ7z-sfLI/codeComponent
import { StatHelpText } from "@chakra-ui/react"; // plasmic-import: Ib6pD3xuSwL/codeComponent
import { StatArrow } from "@chakra-ui/react"; // plasmic-import: kXkG5kXOBP1/codeComponent
import { Tabs } from "@chakra-ui/react"; // plasmic-import: 9bEU_Pxl1R/codeComponent
import { TabList } from "@chakra-ui/react"; // plasmic-import: VzW3-QlDZ-/codeComponent
import { Tab } from "@chakra-ui/react"; // plasmic-import: j36wLaWZuB/codeComponent
import { TabPanels } from "@chakra-ui/react"; // plasmic-import: jlPeg7hy9p/codeComponent
import { TabPanel } from "@chakra-ui/react"; // plasmic-import: 0gFJbuL9g9/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: mn1ZNGsn3XwqRSXADLXKwX/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: lwZBb7B2-AWx/css

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  section?: p.Flex<"section">;
  buttonGroup?: p.Flex<typeof ButtonGroup>;
  mainActoin?: p.Flex<typeof Button>;
  numberInput?: p.Flex<typeof NumberInput>;
  tableContainer?: p.Flex<typeof TableContainer>;
  table?: p.Flex<typeof Table>;
  tableCaption?: p.Flex<typeof TableCaption>;
  thead?: p.Flex<typeof Thead>;
  tbody?: p.Flex<typeof Tbody>;
  checkboxGroup?: p.Flex<typeof CheckboxGroup>;
  breadcrumb?: p.Flex<typeof Breadcrumb>;
  aspectRatio?: p.Flex<typeof AspectRatio>;
  stat?: p.Flex<typeof Stat>;
  tabs?: p.Flex<typeof Tabs>;
  tabList?: p.Flex<typeof TabList>;
  tabPanels?: p.Flex<typeof TabPanels>;
};

export interface DefaultHomepageProps {}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <p.Stack
            as={"section"}
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            hasGap={true}
            className={classNames(projectcss.all, sty.section)}
          >
            <ButtonGroup
              data-plasmic-name={"buttonGroup"}
              data-plasmic-override={overrides.buttonGroup}
              className={classNames("__wab_instance", sty.buttonGroup)}
              isAttached={false}
              isDisabled={false}
              size={"lg" as const}
              spacing={"0.5rem" as const}
            >
              <Button
                data-plasmic-name={"mainActoin"}
                data-plasmic-override={overrides.mainActoin}
                className={classNames("__wab_instance", sty.mainActoin)}
                colorScheme={"blue" as const}
                variant={"solid" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__y1AX
                  )}
                >
                  {"Button 1"}
                </div>
              </Button>

              <Button
                className={classNames("__wab_instance", sty.button__lJtD4)}
                variant={"solid" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___2AImu
                  )}
                >
                  {"Button 2"}
                </div>
              </Button>

              <Button
                className={classNames("__wab_instance", sty.button___5Sxt8)}
                variant={"solid" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lh0Xc
                  )}
                >
                  {"Button 3"}
                </div>
              </Button>
            </ButtonGroup>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__wDnm
              )}
            >
              <React.Fragment>
                <React.Fragment>
                  {
                    "Some modifications?!\n\nIntegrate this project into your codebaseâ€”press the "
                  }
                </React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"Code"}
                </span>
                <React.Fragment>
                  {
                    " button in the top right and follow the quickstart instructions.\n\nJoin our Slack community (icon in bottom left) for help any time."
                  }
                </React.Fragment>
              </React.Fragment>
            </div>

            <NumberInput
              data-plasmic-name={"numberInput"}
              data-plasmic-override={overrides.numberInput}
              className={classNames("__wab_instance", sty.numberInput)}
              errorBorderColor={"red.500" as const}
              focusBorderColor={"blue.500" as const}
              format={(() => {
                try {
                  return val => `$` + val;
                } catch (e) {
                  if (e instanceof TypeError) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              size={"lg" as const}
              variant={"outline" as const}
            >
              <NumberInputField
                className={classNames(
                  "__wab_instance",
                  sty.numberInputField__k9UzJ
                )}
              />

              <NumberInputStepper
                className={classNames(
                  "__wab_instance",
                  sty.numberInputStepper__hG9N1
                )}
              >
                <NumberIncrementStepper
                  className={classNames(
                    "__wab_instance",
                    sty.numberIncrementStepper__nbz0W
                  )}
                />

                <NumberDecrementStepper
                  className={classNames(
                    "__wab_instance",
                    sty.numberDecrementStepper__ycjK0
                  )}
                />
              </NumberInputStepper>
            </NumberInput>

            <RadioGroup
              className={classNames("__wab_instance", sty.radioGroup___2Ioea)}
              size={"lg" as const}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___5Qx0G)}
              >
                <Radio
                  className={classNames("__wab_instance", sty.radio__hc1H)}
                  spacing={"0.5rem" as const}
                  value={"1" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zlycO
                    )}
                  >
                    {"Radio 1"}
                  </div>
                </Radio>

                <Radio
                  className={classNames("__wab_instance", sty.radio__a5Xd0)}
                  spacing={"0.5rem" as const}
                  value={"2" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mzBdp
                    )}
                  >
                    {"Radio 2"}
                  </div>
                </Radio>

                <Radio
                  className={classNames("__wab_instance", sty.radio__upykq)}
                  spacing={"0.5rem" as const}
                  value={"3" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fBays
                    )}
                  >
                    {"Radio 3"}
                  </div>
                </Radio>

                <Radio
                  className={classNames("__wab_instance", sty.radio__pJpYc)}
                  spacing={"0.5rem" as const}
                  value={"4" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lIpye
                    )}
                  >
                    {"Radio 4"}
                  </div>
                </Radio>
              </p.Stack>
            </RadioGroup>

            <RadioGroup
              className={classNames("__wab_instance", sty.radioGroup__ovRt)}
              size={"lg" as const}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__mwd7I)}
              >
                <Radio
                  className={classNames("__wab_instance", sty.radio__zA6N)}
                  spacing={"0.5rem" as const}
                  value={"1" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zpFG
                    )}
                  >
                    {"Radio 1"}
                  </div>
                </Radio>

                <Radio
                  className={classNames("__wab_instance", sty.radio__cLtLk)}
                  spacing={"0.5rem" as const}
                  value={"2" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bnoUr
                    )}
                  >
                    {"Radio 2"}
                  </div>
                </Radio>

                <Radio
                  className={classNames("__wab_instance", sty.radio__pPGo)}
                  spacing={"0.5rem" as const}
                  value={"3" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wrgMy
                    )}
                  >
                    {"Radio 3"}
                  </div>
                </Radio>

                <Radio
                  className={classNames("__wab_instance", sty.radio__mK8V)}
                  spacing={"0.5rem" as const}
                  value={"4" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wyUd0
                    )}
                  >
                    {"Radio 4"}
                  </div>
                </Radio>
              </p.Stack>
            </RadioGroup>

            <TableContainer
              data-plasmic-name={"tableContainer"}
              data-plasmic-override={overrides.tableContainer}
              className={classNames("__wab_instance", sty.tableContainer)}
            >
              <Table
                data-plasmic-name={"table"}
                data-plasmic-override={overrides.table}
                className={classNames("__wab_instance", sty.table)}
                colorScheme={"gray" as const}
                size={"md" as const}
                variant={"striped" as const}
              >
                <TableCaption
                  data-plasmic-name={"tableCaption"}
                  data-plasmic-override={overrides.tableCaption}
                  className={classNames("__wab_instance", sty.tableCaption)}
                  placement={"bottom" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3LKRi
                    )}
                  >
                    {"Imperial to metric conversion factors"}
                  </div>
                </TableCaption>

                <Thead
                  data-plasmic-name={"thead"}
                  data-plasmic-override={overrides.thead}
                  className={classNames("__wab_instance", sty.thead)}
                >
                  <Tr className={classNames("__wab_instance", sty.tr__hx3Qz)}>
                    <Th className={classNames("__wab_instance", sty.th__hzYkt)}>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pskIp
                        )}
                      >
                        {"TO CONVERT"}
                      </div>
                    </Th>

                    <Th className={classNames("__wab_instance", sty.th__jiIsO)}>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hD2VR
                        )}
                      >
                        {"INTO"}
                      </div>
                    </Th>

                    <Th className={classNames("__wab_instance", sty.th__xpBh4)}>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__b8HCj
                        )}
                      >
                        {"MULTIPLY BY"}
                      </div>
                    </Th>
                  </Tr>
                </Thead>

                <Tbody
                  data-plasmic-name={"tbody"}
                  data-plasmic-override={overrides.tbody}
                  className={classNames("__wab_instance", sty.tbody)}
                >
                  <Tr className={classNames("__wab_instance", sty.tr__rDoH0)}>
                    <Td className={classNames("__wab_instance", sty.td___1Syg)}>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___0MbVg
                        )}
                      >
                        {"inches"}
                      </div>
                    </Td>

                    <Td className={classNames("__wab_instance", sty.td__eMmlv)}>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__c9Th0
                        )}
                      >
                        {"millimetres (mm)"}
                      </div>
                    </Td>

                    <Td
                      className={classNames("__wab_instance", sty.td___98Kzl)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mVEg2
                        )}
                      >
                        {"25.4"}
                      </div>
                    </Td>
                  </Tr>

                  <Tr className={classNames("__wab_instance", sty.tr__uUs4H)}>
                    <Td className={classNames("__wab_instance", sty.td__ubAsp)}>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__aOixx
                        )}
                      >
                        {"inches"}
                      </div>
                    </Td>

                    <Td className={classNames("__wab_instance", sty.td__eMmlv)}>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pgsHq
                        )}
                      >
                        {"millimetres (mm)"}
                      </div>
                    </Td>

                    <Td
                      className={classNames("__wab_instance", sty.td___98Kzl)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___2UyNd
                        )}
                      >
                        {"25.4"}
                      </div>
                    </Td>
                  </Tr>

                  <Tr className={classNames("__wab_instance", sty.tr__lLeCo)}>
                    <Td className={classNames("__wab_instance", sty.td__jiMei)}>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__h1WF8
                        )}
                      >
                        {"inches"}
                      </div>
                    </Td>

                    <Td className={classNames("__wab_instance", sty.td__eMmlv)}>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__d6Ulu
                        )}
                      >
                        {"millimetres (mm)"}
                      </div>
                    </Td>

                    <Td
                      className={classNames("__wab_instance", sty.td___98Kzl)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__otpkx
                        )}
                      >
                        {"25.4"}
                      </div>
                    </Td>
                  </Tr>

                  <Tr className={classNames("__wab_instance", sty.tr__oAaHr)}>
                    <Td className={classNames("__wab_instance", sty.td__vn8A)}>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1DUnP
                        )}
                      >
                        {"inches"}
                      </div>
                    </Td>

                    <Td className={classNames("__wab_instance", sty.td__eMmlv)}>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wGszV
                        )}
                      >
                        {"millimetres (mm)"}
                      </div>
                    </Td>

                    <Td
                      className={classNames("__wab_instance", sty.td___98Kzl)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___7J2P
                        )}
                      >
                        {"25.4"}
                      </div>
                    </Td>
                  </Tr>

                  <Tr className={classNames("__wab_instance", sty.tr__y0QxY)}>
                    <Td className={classNames("__wab_instance", sty.td__djzKw)}>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__e0AMp
                        )}
                      >
                        {"inches"}
                      </div>
                    </Td>

                    <Td className={classNames("__wab_instance", sty.td__eMmlv)}>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sRp1O
                        )}
                      >
                        {"millimetres (mm)"}
                      </div>
                    </Td>

                    <Td
                      className={classNames("__wab_instance", sty.td___98Kzl)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__uAqZg
                        )}
                      >
                        {"25.4"}
                      </div>
                    </Td>
                  </Tr>
                </Tbody>
              </Table>
            </TableContainer>

            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___5SOw9)}
              >
                <CheckboxGroup
                  data-plasmic-name={"checkboxGroup"}
                  data-plasmic-override={overrides.checkboxGroup}
                  className={classNames("__wab_instance", sty.checkboxGroup)}
                  isDisabled={false}
                  size={"lg" as const}
                >
                  <Checkbox
                    className={classNames(
                      "__wab_instance",
                      sty.checkbox___5V5Zw
                    )}
                    colorScheme={"purple" as const}
                    spacing={"0.5rem" as const}
                    value={undefined}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nwW1K
                      )}
                    >
                      {"Checkbox 1"}
                    </div>
                  </Checkbox>

                  <Checkbox
                    className={classNames(
                      "__wab_instance",
                      sty.checkbox__zQWy4
                    )}
                    colorScheme={"blue" as const}
                    isDisabled={false}
                    isIndeterminate={false}
                    isInvalid={false}
                    isRequired={false}
                    spacing={"0.5rem" as const}
                    value={"2" as const}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__g2Rgq
                      )}
                    >
                      {"Checkbox 2"}
                    </div>
                  </Checkbox>

                  <Checkbox
                    className={classNames(
                      "__wab_instance",
                      sty.checkbox__cVoDr
                    )}
                    colorScheme={"blue" as const}
                    spacing={"0.5rem" as const}
                    value={"3" as const}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__n00Ok
                      )}
                    >
                      {"Checkbox 3"}
                    </div>
                  </Checkbox>
                </CheckboxGroup>
              </p.Stack>
            ) : null}

            <Breadcrumb
              data-plasmic-name={"breadcrumb"}
              data-plasmic-override={overrides.breadcrumb}
              className={classNames("__wab_instance", sty.breadcrumb)}
              separator={"/" as const}
              spacing={"8px" as const}
            >
              <BreadcrumbItem
                className={classNames(
                  "__wab_instance",
                  sty.breadcrumbItem__dbOev
                )}
                seperator={"/" as const}
                spacing={"8px" as const}
              >
                <BreadcrumbLink
                  className={classNames(
                    "__wab_instance",
                    sty.breadcrumbLink__yawsi
                  )}
                  href={"#" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fsKc1
                    )}
                  >
                    {"Home"}
                  </div>
                </BreadcrumbLink>
              </BreadcrumbItem>

              <BreadcrumbItem
                className={classNames(
                  "__wab_instance",
                  sty.breadcrumbItem__fJNjo
                )}
                seperator={"/" as const}
                spacing={"8px" as const}
              >
                <BreadcrumbLink
                  className={classNames(
                    "__wab_instance",
                    sty.breadcrumbLink__wRrAb
                  )}
                  href={"#" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cunN
                    )}
                  >
                    {"Docs"}
                  </div>
                </BreadcrumbLink>
              </BreadcrumbItem>

              <BreadcrumbItem
                className={classNames(
                  "__wab_instance",
                  sty.breadcrumbItem__kTmM8
                )}
                seperator={"/" as const}
                spacing={"8px" as const}
              >
                <BreadcrumbLink
                  className={classNames(
                    "__wab_instance",
                    sty.breadcrumbLink__z00LZ
                  )}
                  href={"#" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lhQgE
                    )}
                  >
                    {"Breadcrumb"}
                  </div>
                </BreadcrumbLink>
              </BreadcrumbItem>
            </Breadcrumb>
          </p.Stack>

          <AspectRatio
            data-plasmic-name={"aspectRatio"}
            data-plasmic-override={overrides.aspectRatio}
            className={classNames("__wab_instance", sty.aspectRatio)}
            ratio={(() => {
              try {
                return 16 / 9;
              } catch (e) {
                if (e instanceof TypeError) {
                  return 1.4;
                }
                throw e;
              }
            })()}
          >
            <Image
              className={classNames("__wab_instance", sty.image__dAaMt)}
              fallbackSrc={"https://via.placeholder.com/150" as const}
              src={"https://bit.ly/naruto-sage" as const}
            />
          </AspectRatio>

          <Stat
            data-plasmic-name={"stat"}
            data-plasmic-override={overrides.stat}
            className={classNames("__wab_instance", sty.stat)}
          >
            <StatLabel
              className={classNames("__wab_instance", sty.statLabel__iiGa)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vH4N
                )}
              >
                {"Collected Fees"}
              </div>
            </StatLabel>

            <StatNumber
              className={classNames("__wab_instance", sty.statNumber__o1Tr)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__iEkKc
                )}
              >
                {"Â£345,670"}
              </div>
            </StatNumber>

            <StatHelpText
              className={classNames("__wab_instance", sty.statHelpText__foBeY)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__wUjhP)}>
                <StatArrow
                  className={classNames("__wab_instance", sty.statArrow__qzYP)}
                  type={"increase" as const}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__iy8Oe
                  )}
                >
                  {"Last 7 days"}
                </div>
              </div>
            </StatHelpText>
          </Stat>

          <Tabs
            data-plasmic-name={"tabs"}
            data-plasmic-override={overrides.tabs}
            className={classNames("__wab_instance", sty.tabs)}
            isFitted={true}
            orientation={"vertical" as const}
            variant={"enclosed-colored" as const}
          >
            <TabList
              data-plasmic-name={"tabList"}
              data-plasmic-override={overrides.tabList}
              className={classNames("__wab_instance", sty.tabList)}
            >
              <Tab
                className={classNames("__wab_instance", sty.tab__hrGna)}
                isDisabled={false}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vyO6J
                  )}
                >
                  {"Tab 1"}
                </div>
              </Tab>

              <Tab className={classNames("__wab_instance", sty.tab___4V5ZS)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bEzDw
                  )}
                >
                  {"Tab 2"}
                </div>
              </Tab>

              <Tab
                className={classNames("__wab_instance", sty.tab__kl7Z)}
                isDisabled={false}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__z7X1J
                  )}
                >
                  {"Tab 3"}
                </div>
              </Tab>

              <Tab className={classNames("__wab_instance", sty.tab__eaTmB)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lkhVu
                  )}
                >
                  {"Tab 4"}
                </div>
              </Tab>
            </TabList>

            <TabPanels
              data-plasmic-name={"tabPanels"}
              data-plasmic-override={overrides.tabPanels}
              className={classNames("__wab_instance", sty.tabPanels)}
            >
              <TabPanel
                className={classNames("__wab_instance", sty.tabPanel__hEe2Q)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cw0Ou
                  )}
                >
                  {"Tab 1's Panel Content"}
                </div>
              </TabPanel>

              <TabPanel
                className={classNames("__wab_instance", sty.tabPanel__wzL8R)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___6EhAv
                  )}
                >
                  {"Tab 2's Panel Content"}
                </div>
              </TabPanel>

              <TabPanel
                className={classNames("__wab_instance", sty.tabPanel___613HX)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__md5DJ
                  )}
                >
                  {"Tab 3's Panel Content"}
                </div>
              </TabPanel>

              <TabPanel
                className={classNames("__wab_instance", sty.tabPanel__z1Utv)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___9Mv0B
                  )}
                >
                  {"Tab 4's Panel Content"}
                </div>
              </TabPanel>
            </TabPanels>
          </Tabs>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "buttonGroup",
    "mainActoin",
    "numberInput",
    "tableContainer",
    "table",
    "tableCaption",
    "thead",
    "tbody",
    "checkboxGroup",
    "breadcrumb",
    "aspectRatio",
    "stat",
    "tabs",
    "tabList",
    "tabPanels"
  ],
  section: [
    "section",
    "buttonGroup",
    "mainActoin",
    "numberInput",
    "tableContainer",
    "table",
    "tableCaption",
    "thead",
    "tbody",
    "checkboxGroup",
    "breadcrumb"
  ],
  buttonGroup: ["buttonGroup", "mainActoin"],
  mainActoin: ["mainActoin"],
  numberInput: ["numberInput"],
  tableContainer: ["tableContainer", "table", "tableCaption", "thead", "tbody"],
  table: ["table", "tableCaption", "thead", "tbody"],
  tableCaption: ["tableCaption"],
  thead: ["thead"],
  tbody: ["tbody"],
  checkboxGroup: ["checkboxGroup"],
  breadcrumb: ["breadcrumb"],
  aspectRatio: ["aspectRatio"],
  stat: ["stat"],
  tabs: ["tabs", "tabList", "tabPanels"],
  tabList: ["tabList"],
  tabPanels: ["tabPanels"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  buttonGroup: typeof ButtonGroup;
  mainActoin: typeof Button;
  numberInput: typeof NumberInput;
  tableContainer: typeof TableContainer;
  table: typeof Table;
  tableCaption: typeof TableCaption;
  thead: typeof Thead;
  tbody: typeof Tbody;
  checkboxGroup: typeof CheckboxGroup;
  breadcrumb: typeof Breadcrumb;
  aspectRatio: typeof AspectRatio;
  stat: typeof Stat;
  tabs: typeof Tabs;
  tabList: typeof TabList;
  tabPanels: typeof TabPanels;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    buttonGroup: makeNodeComponent("buttonGroup"),
    mainActoin: makeNodeComponent("mainActoin"),
    numberInput: makeNodeComponent("numberInput"),
    tableContainer: makeNodeComponent("tableContainer"),
    table: makeNodeComponent("table"),
    tableCaption: makeNodeComponent("tableCaption"),
    thead: makeNodeComponent("thead"),
    tbody: makeNodeComponent("tbody"),
    checkboxGroup: makeNodeComponent("checkboxGroup"),
    breadcrumb: makeNodeComponent("breadcrumb"),
    aspectRatio: makeNodeComponent("aspectRatio"),
    stat: makeNodeComponent("stat"),
    tabs: makeNodeComponent("tabs"),
    tabList: makeNodeComponent("tabList"),
    tabPanels: makeNodeComponent("tabPanels"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
